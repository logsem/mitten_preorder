;; Guarded Rec
;;        g
;;       -->
;; l < T     S
;;      <---
;;        d
;; id_l : id -> l
;; dg_id: d o g -> id
;; box := d o g

;; USAGE of LETMOD:
;; let example : {mu | << nu | Nat >>} -> << rho | Nat >> @ M
;; fun x0 -> letmod mu (fun z -> A(z)) mod nu (x1) <- x0 in (mod rho x1)

;; EXPLANATION:
;; 1. mu                  denotes the framing modality of the type we want to eliminate
;; 2. (fun z -> A(z))     denotes the (potentially dependent) type we eliminate into. In this example A(z) = << rho | Nat >>
;; 3. nu                  denotes the modality of the modal type
;; 4. "mod nu (x1) <- x0" means that in the body of the letmod expression we may assume that x0 is of the form mod nu (x1)
;;                        and thus we can use "x1 : {mu . nu | Nat}" instead
;; 5. "mod rho x1"        is the body of the function. It silently requires that nu . mu <= rho in your mode theory. Otherwise,
;;                        type checkin will fail with "cannot derive (mu . nu) <= rho"
;; 6. @ M                 is the mode where the term is formed. It has to be the case that codomain(rho) = codomain(mu) = M


;; AXIOMS
;; We can axiomatize constants at any mode, for instance:
;; axiom lob : (A : U<0>) -> ({l | A} -> A) -> A @ T
;; These will break canonicity but type checking still works. Equational reasoning (working with identity types) becomes
;; very difficult.

;;-------------- EQUALITY AXIOM and LEMMA ---------------------

let inv_eq1 : (A : U<0>) -> (B : U<0>) -> (Id U<0> A B) -> Id U<0> B A @ T =
    fun A B eq ->
    match eq at x y q -> (Id U<0> y x) with
    | refl x -> refl x


let transport1 : (A : U<0>) -> (B : U<0>) -> (Id U<0> A B) -> A -> B @ T =
    fun A B eq ->
    match eq at x y p -> x -> y with
          | refl z -> fun x -> x

;; ------------------- Box is an idempotant comonad ------------------------
let dup_inv : (A : {box . box | U<0>}) -> << box | << box | A >> >> -> << box | A >> @ T =
    fun A -> fun x ->
    letmod idm (fun z -> << box |  A >>) mod box (y) <- x in
    letmod box (fun z -> << box |  A >>) mod box (z) <- y in
    mod (box . box) z

normalize dup_inv {box . box, Nat} at << box | << box | Nat >> >> -> << box | Nat >> @ T


;; ------------------- Modal elimination tests ----------------------
let triv : (A : U<0>) -> (x : A) -> <<idm | A>> @ S =
    fun A -> fun x -> mod idm x

;; -------------- The next function for the later modality, next1 is defined over the universe -----------
let next : (A : U<0>) -> A -> << l | A >> @ T =
    fun A -> fun x -> mod l x


let next1 : U<0> -> << l | U<0> >> @ T =
    fun x -> mod l x

let coe : (A : U<0>) -> A -> << l | A >> @ T =
    fun A x -> mod l x

let l-apply : (A : {l | U<0>}) -> (B : {l | U<0>}) -> << l | A -> B >> -> << l | A >> -> << l | B >> @ T =
    fun A B f a -> letmod idm (fun _ -> << l | B >>) mod l (g) <- f in
                   letmod idm (fun _ -> << l | B >>) mod l (b) <- a in
                   mod l (g b)
;; -------------------- AXIOMS for Guarded Rec -------------

axiom lob : (A : U<0>) -> ({l | A} -> A) -> A @ T
axiom lob1 : ({l | U<0>} -> U<0>) -> U<0> @ T
axiom lob_beta :
  (A : U<0>) ->
  (f : {l | A} -> A) ->
  Id A (lob A f) (letmod idm (fun z -> A) mod l (x) <- next A (lob A f) in f {l, x})
  @ T
axiom lob1_beta :
  (f : {l | U<0>} -> U<0>) ->
  Id U<0> (lob1 f) (letmod idm (fun z -> U<0>) mod l (x) <- next1 (lob1 f) in f {l, x})
  @ T

;; -------------- Guarded Streams -----------------------

let gstream : (A : U<0>) -> U<0> @ T =
    fun A -> lob1 (fun x ->  A * << l | x >>)

let gstream_fun : (A : U<0>) -> {l | U<0>} -> U<0> @ T =
   fun A s ->  A * << l | s >>

;; ------- Note that
;;                      letmod idm (fun z -> U<0>) mod l (x) <- next1 (gstream A) in (gstream_fun A) {l, x}
;;             -------> A * << l | gstream A >>

let unfold : (A : U<0>) -> (gstream A) -> A * << l | gstream A >>
     @ T =
    fun A str ->
        transport1
            (gstream A)
            (A * << l | gstream A >>)
            (lob1_beta (gstream_fun A))
            str

let fold : (A : U<0>) -> (A * << l | gstream A >>) -> gstream A @ T =
    fun A str ->
        transport1
            (A * << l | gstream A >>)
            (gstream A)
            (inv_eq1
                (gstream A)
                (A * << l | gstream A >>)
                (lob1_beta (gstream_fun A)))
            str

;; -------------

let ghead : (A : U<0>) -> (gstream A) -> A @ T =
    fun A lst -> fst (unfold A lst)

let gtail : (A : U<0>) -> (gstream A) -> << l | gstream A >> @ T =
    fun A str -> snd (unfold A str)

let gcons : (A : U<0>) -> A -> << l | gstream A >> -> gstream A @ T =
    fun A head tail -> fold A (pair (head , tail))


;; ------------- Now one could try to prove things like stream = gcons (ghead stream , gtail stream)
;; ------------- Equational reasoning is however very difficult in a system without function extensionality

;; ------------- Some MTT functions needed to work around the fact that << idm | A >> =/= A and -----------------
;; -------------- << g | << d | A >> >> =/= << g . d | A >>  = << idm | A >> ------------------------

let triv_S : (A : U<0>) -> << idm | A >> -> A @ S =
    fun A x -> letmod idm (fun z -> A) mod idm (y) <- x in y

let triv_T : (A : U<0>) -> << idm | A >> -> A @ T =
    fun A x -> letmod idm (fun z -> A) mod idm (y) <- x in y

let comp_g-d : (A : U<0>) -> << g | << d | A >> >> -> A @ S =
    fun A x -> letmod idm (fun z -> A) mod g (y) <- x in
               letmod g (fun z -> A) mod d (z) <- y in
               triv_S A (mod (g . d) z)

let comp_g-l : (A : { g | U<0>}) -> << g | << l | A >> >> -> << g | A >> @ S =
    fun A x -> letmod idm (fun z -> << g | A >>) mod g (y) <- x in
               letmod g (fun z -> << g | A >>) mod l (z) <- y in
               mod (g . l) z

;; ----------------------------- Streams Basics --------------------------
;; ----------- Here I define head, tail and cons for streams -------------
;; ----------- Type of constant naturals at T ---------------------

let NatD : U<0> @ T = << d | Nat >>

let stream : (A : U<0>) -> U<0> @ S =
    fun A -> << g | gstream << d | A >> >>


let head : (A : U<0>) -> (stream A) -> A @ S =
    fun A str -> letmod idm (fun z -> A) mod g (gstr) <- str in
                 comp_g-d A (mod g (ghead (<< d | A >>) gstr))

let tail : (A : U<0>) -> (stream A) -> stream A @ S =
    fun A str -> letmod idm (fun z -> stream A) mod g (gstr) <- str in
                 comp_g-l {g , (gstream << d | A >>)} (mod g (gtail (<< d | A >>) gstr))

let cons : (A : U<0>) -> A -> (stream A) -> stream A @ S =
    fun A a str -> letmod idm (fun z -> stream A) mod g (gstr) <- str in
                   mod g (gcons << d | A >> (mod d a) (next (gstream << d | A >>) gstr))

let nth : Nat -> (stream Nat) -> Nat @ S =
    fun n ->
    rec n at _ -> (stream Nat) -> Nat with
    | zero -> (fun str -> head Nat str)
    | suc _ , p -> (fun str -> p (tail Nat str))


let map : (A : U<0>) -> (A -> A) -> (gstream A) -> gstream A @ T =
    fun A g -> lob ((gstream A) -> gstream A)
            (fun f ->
            fun gstr -> gcons A (g (ghead A gstr))
                                  (mod l (f gstr)))

;; ---------------- observe that f : {l | gstream Nat -> gstream Nat} and gstr : gstream Nat ---------
;; ---------------- but the 2-cell 1<= l is elaborated, so actually the term is (f {gstr, 1<= l})

;; ----------------------------- Stream Examples --------------------------
;; --------------------- Stream constantly 0 ------------------------------

let zeros : stream Nat @ S =
    mod g (lob (gstream << d | Nat >>) (fun gstr -> gcons (<< d | Nat >>) (mod d 0) (mod l gstr)))

normalize (head Nat zeros) at Nat @ S


;; ---------------- Stream of all natural numbers ----------------------
let nats : stream Nat @ S =
    mod g (lob (gstream << d | Nat >>)
          (fun gstr -> gcons (<< d | Nat >>) (mod d 0) (mod l (map (<< d | Nat >>)
                                                                   (fun x -> letmod idm (fun z -> << d | Nat >>) mod d (y) <- x in mod d (suc y))
                                                                   gstr))))

;; ----------------- Stream toggling 0 and 1 --------------------------------
let toggle : gstream NatD @ T =
    lob (gstream NatD)
        (fun gstr -> gcons NatD
                           (mod d 1)
                           (next (gstream NatD) (gcons NatD (mod d 0) (mod l gstr) )))

;; --------------- Very simple type family to define dependent types for tests
let uhoh : U<0> -> Nat -> U<0> @ T =
    fun A n ->
    rec n at _ -> U<0> with
    | zero -> A * Nat
    | suc _ , _ -> A * A


;; let test1 : gstream NatD @ T =
;;   lob (gstream Nat) (fun gstr -> gcons (<< d | Nat >>) (mod d 0) (mod l gstr))

;; let lala : (Nat * Nat) -> (Nat * U<0>) @ T =
;;   fun x -> x

;; let test2 : ((x : Nat) * (uhoh Nat x))  -> ((x : Nat) * (uhoh NatD x)) @ T =
;;    fun x -> x


let interleave : (gstream NatD) -> { l | (gstream NatD) } -> gstream NatD @ T =
    lob ((gstream NatD) -> { l | (gstream NatD) } -> gstream NatD )
        (fun inleave -> (fun gstr1 gstr2 -> gcons NatD
                                                  (ghead NatD gstr1)
                                                  (letmod idm (fun z -> << l | gstream NatD >>) mod l (lockedgstr1) <- (gtail NatD gstr1) in (mod l (inleave gstr2 {l , lockedgstr1})))))

let paperfold : gstream NatD @ T =
    lob (gstream NatD) (fun gstr -> interleave toggle {l , gstr})
